#include "pass_bits/helper/seed.hpp"

namespace pass
{
decltype(seed::seed_) seed::seed_ = 12345;
decltype(seed::generator_) seed::generator_;

std::mt19937_64 &seed::get_generator()
{
  return generator_;
}

void seed::set_seed(const arma::arma_rng::seed_type seed)
{
  seed_ = seed;

  // Seeding C++'s and Armadillo's generator.
  generator_.seed(seed_);
  arma::arma_rng::set_seed(seed_);
}

void seed::set_random_seed()
{
  // Initialise Armadillo's generator with any random seed.
  // This seed will be overwritten later on, no need to store it.
  arma::arma_rng::set_seed_random();

#if defined(SUPPORT_MPI)
  // For programs using MPI, each node needs to seeded differently in order to avoid a degeneration of the random number generator, due to synchronisation.
  // Basically, we generated as much random numbers as there are nodes and seed the i-th node by the i-th generated random number.
  set_seed(arma::randi<arma::Col<arma::arma_rng::seed_type>>(static_cast<arma::uword>(pass::number_of_nodes()))(static_cast<arma::uword>(pass::node_rank())));
#else

  // Without MPI, using the first random number generated by Armadillo's generator as seed is sufficient.
  set_seed(arma::randi<arma::Col<arma::arma_rng::seed_type>>(1)(0));

#endif
}

arma::arma_rng::seed_type seed::get_seed()
{
  return seed_;
}
} // namespace pass
